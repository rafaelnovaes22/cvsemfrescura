services:
  # Database PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: cv_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-cv_sem_frescura}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - cv_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cv_backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-cv_sem_frescura}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      JWT_SECRET: ${JWT_SECRET:-2f24d5f16d2d677e9b3fa7e86299fce814e4cf3fc9d75cdcd09a881a484f2e357f983996e3559f53ab646fae167388ee58883cc5e9b0539f5ffeea906bef6448}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-sk-your_openai_api_key_here}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY:-your_claude_api_key_here}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-your_anthropic_key_here}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-sk_test_your_stripe_secret_key_here}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY:-pk_test_your_stripe_publishable_key_here}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-whsec_your_webhook_secret_here}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:8080}
      # Email Configuration - HÍBRIDA (SendGrid + Zoho)
      # SendGrid para ENVIO (emails automáticos)
      SMTP_HOST: smtp.sendgrid.net
      SMTP_PORT: 587
      SMTP_USER: apikey
      SMTP_PASS: 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
      FROM_EMAIL: noreply@cvsemfrescura.com.br
      # Zoho para RECEBIMENTO (emails de contato)
      CONTACT_EMAIL: contato@cvsemfrescura.com.br
      SUPPORT_EMAIL: suporte@cvsemfrescura.com.br
    ports:
      - "3001:3000"
    depends_on:
      - postgres
    networks:
      - cv_network
    command: npm run dev

  # Frontend (Nginx serving static files)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cv_frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-8080}:80"
    depends_on:
      - backend
    networks:
      - cv_network

  # Redis for caching (opcional)
  redis:
    image: redis:7-alpine
    container_name: cv_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - cv_network

volumes:
  postgres_data:
  redis_data:


networks:
  cv_network:
    driver: bridge
