const axios = require('axios');
const claudeService = require('./claudeService');
const { costTracker } = require('../utils/costTracker');

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_URL = 'https://api.openai.com/v1/chat/completions';

function buildPrompt(jobsText, resumeText) {
  return `Responda sempre em portugu√™s do Brasil.
Voc√™ √© um sistema ATS especialista em an√°lise de curr√≠culos e vagas.

1. Extraia e liste de forma COMPLETA, DETALHADA e SEM OMITIR NENHUMA todos os termos relevantes das vagas em "job_keywords". Siga OBRIGATORIAMENTE as regras abaixo:
   - Remova duplicidades contextuais (ex: "roadmap" e "vis√£o e roadmap" ‚Üí mantenha apenas o termo mais completo; "metodologias √°geis" e "metodologias" ‚Üí mantenha o termo mais espec√≠fico).
   - Agrupe termos semelhantes (ex: "requisitos t√©cnicos", "requisitos funcionais", "requisitos de neg√≥cios", "requisitos n√£o funcionais" ‚Üí "requisitos (t√©cnicos, funcionais, de neg√≥cios, n√£o funcionais)").
   - Elimine verbos soltos ou termos que n√£o fazem sentido isoladamente (ex: "ouvir", "planejamento", "definir escopo" ‚Üí mantenha apenas "escopo" se relevante).
   - Mantenha apenas substantivos compostos, nomes de √°reas, ferramentas, conceitos completos e termos realmente relevantes.
   - N√£o repita termos com varia√ß√£o de mai√∫sculas/min√∫sculas ou plural/singular.
   - O resultado deve ser uma lista enxuta, sem repeti√ß√µes, agrupada por contexto quando necess√°rio.
   - N√ÉO inclua frases descritivas, apenas termos, tecnologias, compet√™ncias, ferramentas, cargos, requisitos, etc.
   - N√ÉO inclua verbos soltos (ex: "Implementar", "Executar", "Comunicar") como palavras-chave. Verbos s√≥ devem aparecer se fizerem parte de uma express√£o t√©cnica ou termo composto relevante (ex: "Gest√£o de Projetos", "Aplicar Metodologias √Ågeis").
   - N√ÉO utilize objetos ou listas separadas. Apenas um array √∫nico contendo todos os termos relevantes extra√≠dos das vagas.
   - Ao extrair termos de m√∫ltiplas vagas, consolide todos em um √öNICO array job_keywords, SEM duplicidades. Cada termo deve aparecer apenas uma vez, mesmo que esteja presente em mais de uma vaga ou trecho. Fa√ßa a deduplica√ß√£o ap√≥s juntar todos os termos das vagas analisadas.

2. Para cada palavra-chave extra√≠da da vaga (em "job_keywords"), compare diretamente com TODO o texto do curr√≠culo fornecido:
   - Considere como presente APENAS se a express√£o da palavra-chave (ou seu plural/singular) aparecer como palavra inteira no texto do curr√≠culo, ignorando caixa e acentos. N√ÉO marque como presente se a palavra-chave for apenas parte de outra palavra, aparecer em contexto amplo, como sin√¥nimo distante, ou como fragmento. N√ÉO aceite matches por contexto, associa√ß√£o indireta, parte de palavra, ou varia√ß√µes morfol√≥gicas que n√£o sejam plural/singular.
   - Exemplos:
     - "gest√£o de backlog" s√≥ deve ser marcada como presente se a express√£o completa aparecer. Se houver apenas "backlog" ou "gest√£o", N√ÉO marque como presente.
     - "estrat√©gias" s√≥ deve ser marcada como presente se "estrat√©gias" ou "estrat√©gia" aparecerem como palavra inteira. "objetivos estrat√©gicos" N√ÉO √© v√°lido.
     - "produtos de IA" s√≥ deve ser marcada como presente se a express√£o completa aparecer. Se houver apenas "produtos" ou "IA" separados, N√ÉO marque como presente.
     - "cientista de dados" s√≥ deve ser marcada como presente se a express√£o completa aparecer. Se houver apenas "cientista" ou "dados" separados, N√ÉO marque como presente.
     - "comunica√ß√£o efetiva" s√≥ deve ser marcada como presente se a express√£o completa aparecer. Se houver apenas "comunica√ß√£o" ou "efetiva" separados, N√ÉO marque como presente.
   - Seja estritamente literal: s√≥ marque como presente se a express√£o exata (ou plural/singular) estiver expl√≠cita, como palavra inteira, no texto do curr√≠culo.
   - Se a palavra-chave da vaga estiver presente no texto do curr√≠culo, adicione ao array "job_keywords_present".
   - Se a palavra-chave da vaga N√ÉO estiver presente no texto do curr√≠culo nesses termos, adicione ao array "job_keywords_missing".
   - N√ÉO utilize resume_keywords para montar esses arrays; a compara√ß√£o deve ser feita SEMPRE diretamente entre cada termo de job_keywords e o texto completo do curr√≠culo.
   - N√ÉO extraia nem retorne resume_keywords.
   - N√ÉO agrupe nem categorize, apenas retorne esses dois arrays al√©m de "job_keywords".
   - Ignore apenas casos sem rela√ß√£o real (n√£o aceite palavras que n√£o tenham correspond√™ncia sem√¢ntica ou contextual com a vaga/curr√≠culo).

// 3. N√£o extraia nem liste palavras-chave do curr√≠culo (n√£o gere resume_keywords).

3. Compare as listas: preencha "found_keywords" com as palavras-chave das vagas presentes no curr√≠culo e "missing_keywords" com as palavras-chave das vagas ausentes no curr√≠culo.

4. Avalie DETALHADAMENTE o curr√≠culo nos seguintes campos, um por um:
   - Resumo
   - Idiomas
   - Forma√ß√£o
   - Habilidades
   - Informa√ß√µes Pessoais
   - Experi√™ncia Profissional
   
   IMPORTANTE - ADAPTA√á√ÉO A DIFERENTES ESTRUTURAS DE CURR√çCULO:
   - Se uma se√ß√£o n√£o existir claramente definida no curr√≠culo, analise o CONTE√öDO DISPON√çVEL e informe que a se√ß√£o est√° ausente ou misturada
   - Se as informa√ß√µes estiverem espalhadas ou misturadas, extraia o que for poss√≠vel do texto dispon√≠vel
   - Para curr√≠culos mal estruturados, foque na ESS√äNCIA das informa√ß√µes, n√£o na formata√ß√£o
   - Se n√£o h√° dados suficientes para uma se√ß√£o, seja honesto: nota baixa + sugest√£o de criar/organizar essa se√ß√£o
   
   Para cada campo, voc√™ DEVE:
   - Dar uma NOTA de 0 a 10 baseada na qualidade, completude e relev√¢ncia para as vagas
     * NOTA 0-2: √Årea para desenvolver ou informa√ß√µes em constru√ß√£o
     * NOTA 3-5: Se√ß√£o presente mas com espa√ßo para crescimento  
     * NOTA 6-8: Se√ß√£o bem estruturada com potencial de aprimoramento
     * NOTA 9-10: Se√ß√£o excelente e bem desenvolvida
   - Escrever uma avalia√ß√£o EMP√ÅTICA e CONSTRUTIVA (m√≠nimo 2 frases) analisando:
     * SEMPRE come√ßar com algo POSITIVO quando poss√≠vel
     * O que est√° BEM na se√ß√£o atual (ou o que encontrou no curr√≠culo mesmo que desorganizado)
     * O que pode ser DESENVOLVIDO de forma encorajadora (incluindo estrutura√ß√£o se necess√°rio)
     * Como a se√ß√£o se relaciona com as vagas analisadas
     * Se a se√ß√£o est√° em constru√ß√£o, mencione de forma SUPORTIVA
   - Fornecer 2-4 sugest√µes PR√ÅTICAS e ENCORAJADORAS de desenvolvimento
   
   INSTRU√á√ïES ESPECIAIS POR SE√á√ÉO:
   - RESUMO: Se n√£o h√° resumo/objetivo, analise se h√° informa√ß√µes introdut√≥rias no in√≠cio
   - EXPERI√äNCIA: Sempre presente de alguma forma - extraia do que estiver dispon√≠vel  
   - HABILIDADES: Se n√£o h√° se√ß√£o espec√≠fica, extraia do texto geral o que for mencionado
   - FORMA√á√ÉO: Se n√£o clara, procure por educa√ß√£o, cursos, universidade, etc.
   - IDIOMAS: Se n√£o mencionado, nota baixa + sugest√£o de incluir
   - INFO PESSOAIS: Sempre h√° algo (nome, contato) - avalie completude
   
   TONE E LINGUAGEM:
   - Use linguagem EXTREMAMENTE AMIG√ÅVEL e ENCORAJADORA
   - NUNCA use palavras como: "cr√≠tico", "ausente", "problem√°tico", "falha", "defici√™ncia", "prejudica", "lacuna"
   - SEMPRE use: "√°rea para desenvolver", "em constru√ß√£o", "oportunidade", "pode crescer", "seria valioso incluir"
   - Reconhe√ßa SEMPRE o esfor√ßo e potencial do candidato
   - Foque no CRESCIMENTO e DESENVOLVIMENTO, nunca nos problemas
   - Seja ESPEC√çFICO mas GENTIL e INSPIRADOR nas sugest√µes
   - Trate cada se√ß√£o como uma "jornada em andamento"
   
   NUNCA deixe uma se√ß√£o sem an√°lise - sempre forne√ßa feedback CONSTRUTIVO e ENCORAJADOR.

5. D√™ recomenda√ß√µes gerais para melhorar o curr√≠culo em rela√ß√£o √†s vagas analisadas.

6. Escreva uma conclus√£o geral sobre o grau de ader√™ncia do curr√≠culo √†s vagas.

VAGAS:
${jobsText}

CURR√çCULO:
${resumeText}

Responda em JSON, SEMPRE incluindo TODAS as chaves abaixo, mesmo que alguma esteja vazia:
{
  "job_keywords": [],
  "resume_keywords": [],
  "missing_keywords": [],
  "found_keywords": [],
  "recommendations": [],
  "conclusion": "",
  "resumo": { "nota": 0, "avaliacao": "", "sugestoes": [] },
  "idiomas": { "nota": 0, "avaliacao": "", "sugestoes": [] },
  "formacao": { "nota": 0, "avaliacao": "", "sugestoes": [] },
  "habilidades": { "nota": 0, "avaliacao": "", "sugestoes": [] },
  "informacoes_pessoais": { "nota": 0, "avaliacao": "", "sugestoes": [] },
  "experiencia_profissional": { "nota": 0, "avaliacao": "", "sugestoes": [] }
}
`;
}

exports.extractATSData = async (jobsText, resumeText) => {
  const prompt = buildPrompt(jobsText, resumeText);
  console.log('[ATS] Tamanho do prompt:', prompt.length, 'caracteres');
  console.log('[ATS] üîÑ Nova estrat√©gia: Claude primeiro ‚Üí OpenAI fallback (economia de ~80%)');

  // üöÄ PRIORIDADE 1: CLAUDE 3.5 SONNET (mais barato e eficiente)
  try {
    console.log('[Claude] Tentando Claude 3.5 Sonnet primeiro...');
    const claudeRaw = await claudeService.extractATSDataClaude(prompt);
    console.log('[Claude] ‚úÖ Resposta recebida com sucesso (modelo prim√°rio)');

    let text = claudeRaw.trim();
    if (text.startsWith('```json')) text = text.slice(7);
    else if (text.startsWith('```')) text = text.slice(3);
    text = text.trim();
    if (text.endsWith('```')) text = text.slice(0, -3);
    text = text.trim();

    return JSON.parse(text);
  } catch (claudeError) {
    console.error('[Claude] ‚ùå Falha no modelo prim√°rio, tentando fallback com OpenAI:', claudeError.message);

    // üîÑ FALLBACK: OPENAI GPT-4 (quando Claude n√£o funciona)
    const requestConfig = {
      model: 'gpt-4-turbo-2024-04-09',
      messages: [
        { role: 'system', content: 'Voc√™ √© um ATS especialista.' },
        { role: 'user', content: prompt }
      ],
      temperature: 0.1,
      max_tokens: 4096
    };

    console.log('[OpenAI] Configura√ß√£o do fallback:', {
      model: requestConfig.model,
      temperature: requestConfig.temperature,
      max_tokens: requestConfig.max_tokens,
      reason: 'Claude indispon√≠vel'
    });

    try {
      const response = await axios.post(
        OPENAI_URL,
        requestConfig,
        {
          headers: {
            'Authorization': `Bearer ${OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
          }
        }
      );

      let text = response.data.choices[0].message.content;
      console.log('[OpenAI] ‚úÖ Resposta recebida com sucesso (fallback)');

      // üí∞ Rastrear custos da API (fallback mais caro)
      const usage = response.data.usage;
      if (usage) {
        const cost = costTracker.trackOpenAI(
          requestConfig.model,
          usage.prompt_tokens || 0,
          usage.completion_tokens || 0,
          'completion',
          false // isPrimary = false (OpenAI agora √© fallback)
        );
        console.log(`[OpenAI] üí∏ Custo do fallback: $${cost.toFixed(4)} (${usage.prompt_tokens} + ${usage.completion_tokens} tokens)`);

        // Comparar custo extra vs Claude
        const claudeEquivalentCost = ((usage.prompt_tokens || 0) * 0.003 / 1000) + ((usage.completion_tokens || 0) * 0.015 / 1000);
        const extraCost = cost - claudeEquivalentCost;
        const extraPercentage = ((extraCost / claudeEquivalentCost) * 100).toFixed(1);
        console.log(`[OpenAI] ‚ö†Ô∏è Custo extra vs Claude: $${extraCost.toFixed(4)} (${extraPercentage}% mais caro)`);
        console.log(`[OpenAI] üîç Investigar: Por que Claude falhou? Rate limit? API down?`);
      }

      // Remove blocos markdown e crases
      text = text.trim();
      if (text.startsWith('```json')) text = text.slice(7);
      else if (text.startsWith('```')) text = text.slice(3);
      text = text.trim();
      if (text.endsWith('```')) text = text.slice(0, -3);
      text = text.trim();

      return JSON.parse(text);
    } catch (openaiError) {
      console.error('[OpenAI] ‚ùå Fallback tamb√©m falhou:', openaiError.message);
      throw new Error(`Ambos modelos falharam - Claude: ${claudeError.message} | OpenAI: ${openaiError.message}`);
    }
  }
};
