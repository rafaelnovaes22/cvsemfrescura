const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, 'database', 'dev.sqlite');

console.log('üîç CONSULTANDO USU√ÅRIOS NO BANCO...');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log(`üìÅ Banco: ${dbPath}`);
console.log('');

const db = new sqlite3.Database(dbPath, sqlite3.OPEN_READONLY, (err) => {
    if (err) {
        console.log('‚ùå ERRO ao conectar:', err.message);
        return;
    }

    console.log('‚úÖ Conectado ao banco SQLite');

    // Primeiro, verificar se a tabela users existe
    db.get("SELECT name FROM sqlite_master WHERE type='table' AND name='users'", (err, row) => {
        if (err) {
            console.log('‚ùå Erro ao verificar tabela:', err.message);
            db.close();
            return;
        }

        if (!row) {
            console.log('‚ùå Tabela users n√£o existe!');
            console.log('üí° Execute primeiro: npm start (para criar tabelas)');
            db.close();
            return;
        }

        console.log('‚úÖ Tabela users encontrada');

        // Verificar estrutura da tabela
        db.all("PRAGMA table_info(users)", (err, columns) => {
            if (err) {
                console.log('‚ùå Erro ao verificar colunas:', err.message);
                db.close();
                return;
            }

            console.log('');
            console.log('üèóÔ∏è ESTRUTURA DA TABELA USERS:');
            console.log('‚îÄ'.repeat(40));

            let hasIsAdmin = false;
            columns.forEach(col => {
                console.log(`üìã ${col.name}: ${col.type}${col.notnull ? ' NOT NULL' : ''}${col.dflt_value ? ` DEFAULT ${col.dflt_value}` : ''}`);
                if (col.name === 'isAdmin') hasIsAdmin = true;
            });

            if (!hasIsAdmin) {
                console.log('');
                console.log('‚ö†Ô∏è PROBLEMA IDENTIFICADO:');
                console.log('‚ùå Coluna isAdmin N√ÉO EXISTE!');
                console.log('');
                console.log('üí° SOLU√á√ÉO:');
                console.log('Execute: cd backend && node fix-admin-migration.js');
                db.close();
                return;
            }

            console.log('');
            console.log('‚úÖ Coluna isAdmin encontrada');
            console.log('');

            // Buscar todos os usu√°rios
            const query = `
                SELECT 
                    id, 
                    name, 
                    email, 
                    isAdmin, 
                    createdAt,
                    last_login
                FROM users 
                ORDER BY createdAt DESC
            `;

            db.all(query, (err, users) => {
                if (err) {
                    console.log('‚ùå Erro na consulta:', err.message);
                    db.close();
                    return;
                }

                console.log(`üìä TOTAL DE USU√ÅRIOS: ${users.length}`);
                console.log('');

                if (users.length === 0) {
                    console.log('‚ùå NENHUM USU√ÅRIO ENCONTRADO!');
                    console.log('');
                    console.log('üí° SOLU√á√ïES:');
                    console.log('1. Registre-se em: http://localhost:3000/analisar.html');
                    console.log('2. Ou crie um admin: node create-admin-user.js admin@test.com --create');
                } else {
                    console.log('üë• USU√ÅRIOS CADASTRADOS:');
                    console.log('‚îÄ'.repeat(50));

                    let adminCount = 0;

                    users.forEach((user, index) => {
                        const isAdmin = Boolean(user.isAdmin);
                        const adminBadge = isAdmin ? 'üëë ADMIN' : 'üë§ USER';
                        const lastLogin = user.last_login ?
                            new Date(user.last_login).toLocaleDateString('pt-BR') :
                            'Nunca';
                        const created = new Date(user.createdAt).toLocaleDateString('pt-BR');

                        console.log(`${index + 1}. ${adminBadge} ${user.email}`);
                        console.log(`   üìõ Nome: ${user.name}`);
                        console.log(`   üîê Admin: ${isAdmin ? 'SIM' : 'N√ÉO'}`);
                        console.log(`   üìÖ Criado: ${created}`);
                        console.log(`   üïê √öltimo login: ${lastLogin}`);
                        console.log('');

                        if (isAdmin) adminCount++;
                    });

                    console.log('üìà ESTAT√çSTICAS:');
                    console.log(`   üëë Administradores: ${adminCount}`);
                    console.log(`   üë§ Usu√°rios normais: ${users.length - adminCount}`);
                    console.log('');

                    if (adminCount === 0) {
                        console.log('‚ö†Ô∏è PROBLEMA CR√çTICO:');
                        console.log('‚ùå NENHUM USU√ÅRIO TEM PERMISS√ïES DE ADMIN!');
                        console.log('');
                        console.log('üîß SOLU√á√ÉO R√ÅPIDA:');

                        const lastUser = users[0]; // Usu√°rio mais recente
                        console.log(`Promover ${lastUser.email} a administrador:`);
                        console.log('');
                        console.log(`cd backend && node create-admin-user.js ${lastUser.email}`);
                        console.log('');
                        console.log('üöÄ DEPOIS:');
                        console.log('1. Fa√ßa logout no navegador');
                        console.log('2. Fa√ßa login novamente');
                        console.log('3. Acesse: http://localhost:3000/admin.html');

                    } else {
                        console.log('‚úÖ SISTEMA OK - TEM ADMINISTRADOR(ES)');
                        console.log('');
                        console.log('üîç SE O PAINEL ADMIN N√ÉO ABRE:');
                        console.log('');
                        console.log('1. üîê Verifique se est√° logado com conta de admin');
                        console.log('2. üßπ Limpe cache do navegador');
                        console.log('3. üîÑ Fa√ßa logout e login novamente');
                        console.log('4. üïµÔ∏è Abra console do navegador (F12) para ver erros');
                        console.log('');

                        const adminUsers = users.filter(u => Boolean(u.isAdmin));
                        console.log('üëë CONTAS DE ADMINISTRADOR:');
                        adminUsers.forEach(admin => {
                            console.log(`   ‚úÖ ${admin.email} (${admin.name})`);
                        });
                    }
                }

                console.log('');
                console.log('üîó LINKS IMPORTANTES:');
                console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
                console.log('üåê Painel Admin: http://localhost:3000/admin.html');
                console.log('üîê Login: http://localhost:3000/analisar.html');
                console.log('üè• Health: http://localhost:3000/health');

                db.close((err) => {
                    if (err) {
                        console.log('‚ùå Erro ao fechar banco:', err.message);
                    } else {
                        console.log('');
                        console.log('‚úÖ Consulta finalizada!');
                    }
                });
            });
        });
    });
}); 