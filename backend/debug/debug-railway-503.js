#!/usr/bin/env node

// üîç Diagn√≥stico Avan√ßado - Erro 503 Railway
console.log('üîç === DIAGN√ìSTICO AVAN√áADO DO ERRO 503 ===');
console.log('üìã Investigando poss√≠veis causas ap√≥s configurar ENCRYPTION_KEY\n');

// Simular ambiente Railway
process.env.NODE_ENV = 'production';
process.env.RAILWAY_ENVIRONMENT = 'production';

// Teste 1: Verificar formato da ENCRYPTION_KEY
console.log('üîë === TESTE 1: FORMATO DA ENCRYPTION_KEY ===');
const testKey = '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef';
process.env.ENCRYPTION_KEY = testKey;

try {
    const crypto = require('crypto');

    // Testar se √© hexadecimal v√°lido
    if (!/^[0-9a-fA-F]{64}$/.test(testKey)) {
        console.log('‚ùå ENCRYPTION_KEY deve ter 64 caracteres hexadecimais');
    } else {
        console.log('‚úÖ Formato da ENCRYPTION_KEY v√°lido');
    }

    // Testar convers√£o para Buffer
    const buffer = Buffer.from(testKey, 'hex');
    console.log('‚úÖ Convers√£o para Buffer OK');

} catch (error) {
    console.log('‚ùå Erro no formato da chave:', error.message);
}

// Teste 2: M√≥dulo de Criptografia
console.log('\nüîê === TESTE 2: M√ìDULO DE CRIPTOGRAFIA ===');
try {
    console.log('üîç Carregando m√≥dulo...');
    const encryption = require('./utils/encryption');
    console.log('‚úÖ M√≥dulo carregado com sucesso');

    // Testar encrypt/decrypt
    const testData = 'test_data_123';
    const encrypted = encryption.encrypt(testData);
    if (encrypted) {
        const decrypted = encryption.decrypt(encrypted);
        if (decrypted === testData) {
            console.log('‚úÖ Criptografia funcionando');
        } else {
            console.log('‚ùå Erro na descriptografia');
        }
    } else {
        console.log('‚ùå Erro na criptografia');
    }
} catch (error) {
    console.log('‚ùå ERRO no m√≥dulo:', error.message);
    console.log('Stack:', error.stack);
}

// Teste 3: Configura√ß√£o de Ambiente
console.log('\nüåç === TESTE 3: CONFIGURA√á√ÉO DE AMBIENTE ===');
try {
    console.log('üîç Carregando configura√ß√£o...');
    delete require.cache[require.resolve('./config/environment')];
    const config = require('./config/environment');
    console.log('‚úÖ Configura√ß√£o carregada');
    console.log('üîç Stripe configurado:', !!config.stripe.secretKey);
} catch (error) {
    console.log('‚ùå ERRO na configura√ß√£o:', error.message);
    console.log('Stack:', error.stack);
}

// Teste 4: Depend√™ncias
console.log('\nüì¶ === TESTE 4: DEPEND√äNCIAS ===');
try {
    console.log('üîç Verificando depend√™ncias cr√≠ticas...');
    require('crypto');
    console.log('‚úÖ crypto');
    require('dotenv');
    console.log('‚úÖ dotenv');
    require('express');
    console.log('‚úÖ express');
    require('stripe');
    console.log('‚úÖ stripe');
} catch (error) {
    console.log('‚ùå Depend√™ncia faltando:', error.message);
}

// Teste 5: Servidor Express
console.log('\nüöÄ === TESTE 5: INICIALIZA√á√ÉO DO SERVIDOR ===');
try {
    console.log('üîç Testando inicializa√ß√£o do Express...');
    const express = require('express');
    const app = express();
    console.log('‚úÖ Express inicializado');

    // Testar middleware b√°sico
    app.use(express.json());
    console.log('‚úÖ Middleware JSON configurado');

} catch (error) {
    console.log('‚ùå ERRO no Express:', error.message);
}

// Teste 6: Vari√°veis de Ambiente Esperadas
console.log('\nüìã === TESTE 6: VARI√ÅVEIS DE AMBIENTE ===');
const requiredVars = [
    'NODE_ENV',
    'ENCRYPTION_KEY',
    'STRIPE_SECRET_KEY',
    'STRIPE_PUBLISHABLE_KEY',
    'DATABASE_URL',
    'JWT_SECRET'
];

requiredVars.forEach(varName => {
    const value = process.env[varName];
    if (value) {
        console.log(`‚úÖ ${varName}: configurada`);
    } else {
        console.log(`‚ö†Ô∏è ${varName}: n√£o configurada`);
    }
});

console.log('\nüîç === POSS√çVEIS CAUSAS DO ERRO 503 ===');
console.log('1. Formato incorreto da ENCRYPTION_KEY (deve ser 64 chars hex)');
console.log('2. Conflito entre vari√°veis (DISABLE_ENCRYPTION + ENCRYPTION_KEY)');
console.log('3. Problema nas chaves do Stripe');
console.log('4. Falta de vari√°veis obrigat√≥rias');
console.log('5. Erro na inicializa√ß√£o do banco de dados');
console.log('6. Timeout na inicializa√ß√£o');

console.log('\nüí° === SOLU√á√ïES SUGERIDAS ===');
console.log('1. Verifique se ENCRYPTION_KEY tem exatamente 64 caracteres hexadecimais');
console.log('2. Remova DISABLE_ENCRYPTION se existir');
console.log('3. Verifique logs do Railway: railway logs --follow');
console.log('4. Teste com chaves de desenvolvimento primeiro');
console.log('5. Considere usar rollback tempor√°rio se urgente');

console.log('\n‚úÖ Diagn√≥stico conclu√≠do!'); 