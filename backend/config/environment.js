// üåç Configura√ß√£o Autom√°tica de Ambiente - CV Sem Frescura
require('dotenv').config();
const { maskKey, decrypt } = require('../utils/encryption');

const isProduction = process.env.NODE_ENV === 'production';
const isRailway = !!process.env.RAILWAY_ENVIRONMENT;
const isLocal = !isProduction && !isRailway;

console.log('üåç Detectando ambiente...');
console.log('üìä NODE_ENV:', process.env.NODE_ENV);
console.log('üöÇ RAILWAY_ENVIRONMENT:', process.env.RAILWAY_ENVIRONMENT);
console.log('üè† Local:', isLocal);
console.log('üöÄ Produ√ß√£o:', isProduction);

// üîê Fun√ß√£o para descriptografar chaves se necess√°rio
const decryptIfNeeded = (value) => {
    if (!value) return value;

    // Logs de debug apenas em desenvolvimento
    if (process.env.NODE_ENV !== 'production') {
        console.log('üîç [DEBUG] Verificando chave para descriptografia...');
        console.log('üîç [DEBUG] Tamanho da chave:', value.length);
        console.log('üîç [DEBUG] Primeiros 10 chars:', value.substring(0, 10));
    }

    // üö® PRIMEIRA VERIFICA√á√ÉO: Se j√° √© uma chave v√°lida do Stripe, usar diretamente
    if (value.match(/^(sk_|pk_|whsec_|rk_)/)) {
        console.log('‚úÖ Chave j√° est√° em texto plano e √© v√°lida');
        return value;
    }

    // üîê SEGUNDA VERIFICA√á√ÉO: Se parece estar criptografada (n√£o come√ßa com sk_, pk_, etc. e √© longa)
    if (value.length > 50) {
        console.log('üîì Tentando descriptografar chave...');

        try {
            const decrypted = decrypt(value);
            if (decrypted && decrypted.match(/^(sk_|pk_|whsec_|rk_)/)) {
                console.log('‚úÖ Chave descriptografada com sucesso');
                if (process.env.NODE_ENV !== 'production') {
                    console.log('üîç [DEBUG] Tamanho descriptografado:', decrypted.length);
                    console.log('üîç [DEBUG] Primeiros 10 chars descriptografados:', decrypted.substring(0, 10));
                }
                return decrypted;
            } else {
                console.warn('‚ö†Ô∏è Descriptografia n√£o resultou em chave v√°lida, usando original');
                return value; // Retorna original se a descriptografia n√£o resultar em chave v√°lida
            }
        } catch (error) {
            console.error('‚ùå Erro na descriptografia:', error.message);
            console.warn('‚ö†Ô∏è Usando chave original devido ao erro de descriptografia');
            return value; // Retorna original se falhar
        }
    } else {
        console.warn('‚ö†Ô∏è Chave n√£o parece ser v√°lida nem criptografada');
    }

    return value; // Retorna original se n√£o conseguir processar
};

// üîë Configura√ß√£o de Chaves Stripe baseada no ambiente
const getStripeConfig = () => {
    // Sempre usar vari√°veis de ambiente - NUNCA hardcode!
    let secretKey = process.env.STRIPE_SECRET_KEY;
    let publishableKey = process.env.STRIPE_PUBLISHABLE_KEY;
    let webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;

    // üîê Descriptografar chaves se necess√°rio (Railway ou produ√ß√£o)
    // S√≥ tentar descriptografar se:
    // 1. Est√° em produ√ß√£o OU Railway
    // 2. Tem ENCRYPTION_KEY configurada
    // 3. N√ÉO tem DISABLE_ENCRYPTION=true
    const shouldDecrypt = (isProduction || isRailway) &&
        process.env.ENCRYPTION_KEY &&
        !process.env.DISABLE_ENCRYPTION &&
        process.env.DISABLE_ENCRYPTION !== 'true';

    if (shouldDecrypt) {
        console.log('üîê Iniciando descriptografia das chaves...');
        console.log('üîê isProduction:', isProduction);
        console.log('üîê isRailway:', isRailway);
        console.log('üîê ENCRYPTION_KEY presente:', !!process.env.ENCRYPTION_KEY);
        console.log('üîê DISABLE_ENCRYPTION:', process.env.DISABLE_ENCRYPTION);

        secretKey = decryptIfNeeded(secretKey);
        publishableKey = decryptIfNeeded(publishableKey);
        webhookSecret = decryptIfNeeded(webhookSecret);
    } else {
        console.log('‚ÑπÔ∏è Descriptografia desabilitada ou n√£o necess√°ria');
        console.log('‚ÑπÔ∏è Usando chaves diretamente do ambiente');
    }

    // üßπ LIMPEZA FOR√áADA DAS VARI√ÅVEIS (corre√ß√£o para problemas de encoding)
    if (secretKey) {
        // Limpar espa√ßos, quebras de linha e caracteres especiais
        secretKey = secretKey.trim().replace(/[\r\n\t]/g, '');

        if (!isProduction) {
            console.log('üîç [DEBUG] SecretKey length:', secretKey.length);
            console.log('üîç [DEBUG] SecretKey masked:', maskKey(secretKey));
            console.log('üîç [DEBUG] Valid Stripe key:', secretKey.startsWith('sk_') || secretKey.startsWith('rk_'));
        }
    }

    if (publishableKey) {
        publishableKey = publishableKey.trim().replace(/[\r\n\t]/g, '');
    }

    if (isLocal) {
        console.log('üîß [LOCAL] Configura√ß√£o para desenvolvimento');

        // Verificar se as chaves de desenvolvimento est√£o configuradas
        if (!secretKey || !publishableKey) {
            console.warn('‚ö†Ô∏è [LOCAL] Chaves do Stripe n√£o configuradas no .env');
            console.warn('üí° [LOCAL] Configure STRIPE_SECRET_KEY e STRIPE_PUBLISHABLE_KEY no arquivo .env');
            console.warn('üîó [LOCAL] Use chaves de TESTE (sk_test_ e pk_test_)');
        }

        return {
            secretKey: secretKey,
            publishableKey: publishableKey,
            webhookSecret: webhookSecret || 'whsec_test_development_fallback',
            environment: publishableKey?.startsWith('pk_test_') ? 'test' : 'unknown'
        };
    } else {
        // üöÄ PRODU√á√ÉO (Railway) - Chaves do .env
        console.log('üöÄ [PRODU√á√ÉO] Usando chaves do Railway (.env)');

        if (!secretKey || !publishableKey) {
            console.error('‚ùå [PRODU√á√ÉO] Chaves do Stripe n√£o configuradas no Railway');
            console.error('üí° [PRODU√á√ÉO] Configure as vari√°veis no Railway Dashboard');
        } else {
            console.log('‚úÖ [PRODU√á√ÉO] Chaves do Stripe configuradas');
            console.log('üîë [PRODU√á√ÉO] SecretKey v√°lida:', secretKey.startsWith('sk_') || secretKey.startsWith('rk_'));
            console.log('üîë [PRODU√á√ÉO] PublishableKey v√°lida:', publishableKey.startsWith('pk_'));
        }

        return {
            secretKey: secretKey,
            publishableKey: publishableKey,
            webhookSecret: webhookSecret,
            environment: publishableKey?.startsWith('pk_test_') ? 'test' : 'live'
        };
    }
};

// üìä Configura√ß√£o do Banco de Dados
const getDatabaseConfig = () => {
    if (isLocal) {
        return {
            url: process.env.DATABASE_URL || './database.sqlite',
            type: 'sqlite'
        };
    } else {
        return {
            url: process.env.DATABASE_URL,
            type: 'postgresql'
        };
    }
};

// üåê Configura√ß√£o de CORS
const getCorsConfig = () => {
    if (isLocal) {
        return {
            origin: [
                'http://localhost:8080',
                'http://localhost:3000',
                'http://127.0.0.1:8080',
                process.env.FRONTEND_URL
            ].filter(Boolean), // Remove valores undefined/null
            credentials: true
        };
    } else {
        return {
            origin: [process.env.FRONTEND_URL, process.env.CORS_ORIGIN].filter(Boolean),
            credentials: true
        };
    }
};

// üì° Configura√ß√£o da API
const getApiConfig = () => {
    let jwtSecret = process.env.JWT_SECRET || 'cv_sem_frescura_jwt_local_development_CHANGE_IN_PRODUCTION';

    // üîê Descriptografar JWT_SECRET se necess√°rio
    if ((isProduction || isRailway) && process.env.ENCRYPTION_KEY && !process.env.DISABLE_ENCRYPTION) {
        jwtSecret = decryptIfNeeded(jwtSecret);
    }

    return {
        port: process.env.PORT || 3000,
        nodeEnv: process.env.NODE_ENV || 'development',
        jwtSecret: jwtSecret,
        jwtExpiry: process.env.JWT_EXPIRY || '7d'
    };
};

const config = {
    environment: {
        isLocal,
        isProduction,
        isRailway,
        name: isLocal ? 'local' : (isProduction ? 'production' : 'development')
    },
    stripe: getStripeConfig(),
    database: getDatabaseConfig(),
    cors: getCorsConfig(),
    api: getApiConfig()
};

console.log('‚úÖ Configura√ß√£o carregada:');
console.log('üîë Stripe environment:', config.stripe.environment);
console.log('üîë Stripe keys configured:', !!config.stripe.secretKey && !!config.stripe.publishableKey);
console.log('üóÑÔ∏è Database type:', config.database.type);
if (!isProduction) {
    console.log('üåê CORS origins:', config.cors.origin);
}

// Valida√ß√µes de seguran√ßa
if (isProduction && (!config.stripe.secretKey || !config.stripe.publishableKey)) {
    console.error('üö® ERRO CR√çTICO: Chaves do Stripe n√£o configuradas em produ√ß√£o!');
}

if (isLocal && (!config.stripe.secretKey || !config.stripe.publishableKey)) {
    console.warn('‚ö†Ô∏è ATEN√á√ÉO: Configure as chaves do Stripe no arquivo .env para desenvolvimento');
}

module.exports = config; 