/**
 * MIGRA√á√ÉO CR√çTICA: Corre√ß√£o da constraint na tabela gift_code_usages
 * 
 * PROBLEMA: Constraint UNIQUE(giftCodeId) impedia m√∫ltiplos usu√°rios usarem o mesmo c√≥digo
 * SOLU√á√ÉO: Manter apenas UNIQUE(giftCodeId, userId) para permitir uso correto
 * 
 * EXECUTAR EM PRODU√á√ÉO VIA RAILWAY
 */

const { Sequelize } = require('sequelize');

async function fixGiftCodeConstraintProduction() {
    let sequelize;

    try {
        console.log('üöÄ INICIANDO MIGRA√á√ÉO CR√çTICA EM PRODU√á√ÉO');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

        // Conectar ao banco usando as vari√°veis de ambiente do Railway
        if (process.env.DATABASE_URL) {
            console.log('üîó Conectando ao PostgreSQL em produ√ß√£o...');
            sequelize = new Sequelize(process.env.DATABASE_URL, {
                dialect: 'postgres',
                logging: console.log,
                dialectOptions: {
                    ssl: {
                        require: true,
                        rejectUnauthorized: false
                    }
                }
            });
        } else if (process.env.DATABASE_PRIVATE_URL) {
            console.log('üîó Conectando ao Railway PostgreSQL...');
            sequelize = new Sequelize(process.env.DATABASE_PRIVATE_URL, {
                dialect: 'postgres',
                logging: console.log,
                dialectOptions: {
                    ssl: {
                        require: true,
                        rejectUnauthorized: false
                    }
                }
            });
        } else {
            throw new Error('‚ùå Vari√°vel DATABASE_URL n√£o encontrada');
        }

        await sequelize.authenticate();
        console.log('‚úÖ Conectado ao banco de dados de produ√ß√£o');

        // Verificar se a tabela existe
        const [tables] = await sequelize.query(
            "SELECT tablename FROM pg_tables WHERE tablename = 'gift_code_usages'"
        );

        if (tables.length === 0) {
            console.log('‚ö†Ô∏è Tabela gift_code_usages n√£o existe, criando...');
            await sequelize.query(`
                CREATE TABLE gift_code_usages (
                    id SERIAL PRIMARY KEY,
                    "giftCodeId" INTEGER NOT NULL REFERENCES gift_codes(id),
                    "userId" INTEGER NOT NULL REFERENCES users(id),
                    "usedAt" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    "createdAt" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    "updatedAt" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    UNIQUE("giftCodeId", "userId")
                )
            `);
            console.log('‚úÖ Tabela criada com constraint correta!');
            return;
        }

        console.log('üîç Verificando constraints existentes...');

        // Verificar constraints atuais
        const [constraints] = await sequelize.query(`
            SELECT 
                conname as constraint_name,
                contype as constraint_type,
                pg_get_constraintdef(oid) as constraint_definition
            FROM pg_constraint 
            WHERE conrelid = 'gift_code_usages'::regclass
        `);

        console.log('üìã Constraints atuais:', constraints);

        // Backup dos dados existentes
        console.log('üíæ Fazendo backup dos dados existentes...');
        const [existingData] = await sequelize.query('SELECT * FROM gift_code_usages');
        console.log(`üìä ${existingData.length} registros encontrados`);

        // Remover constraints problem√°ticas (se existirem)
        for (const constraint of constraints) {
            if (constraint.constraint_type === 'u' &&
                (constraint.constraint_definition.includes('"giftCodeId"') &&
                    !constraint.constraint_definition.includes('"userId"'))) {
                console.log(`üóëÔ∏è Removendo constraint problem√°tica: ${constraint.constraint_name}`);
                await sequelize.query(`ALTER TABLE gift_code_usages DROP CONSTRAINT ${constraint.constraint_name}`);
            }
        }

        // Adicionar constraint correta se n√£o existir
        const hasCorrectConstraint = constraints.some(c =>
            c.constraint_type === 'u' &&
            c.constraint_definition.includes('"giftCodeId"') &&
            c.constraint_definition.includes('"userId"')
        );

        if (!hasCorrectConstraint) {
            console.log('‚ûï Adicionando constraint correta...');
            await sequelize.query(`
                ALTER TABLE gift_code_usages 
                ADD CONSTRAINT gift_code_usages_gift_code_id_user_id_key 
                UNIQUE ("giftCodeId", "userId")
            `);
            console.log('‚úÖ Constraint correta adicionada!');
        } else {
            console.log('‚úÖ Constraint correta j√° existe');
        }

        // Verificar nova estrutura
        const [newConstraints] = await sequelize.query(`
            SELECT 
                conname as constraint_name,
                contype as constraint_type,
                pg_get_constraintdef(oid) as constraint_definition
            FROM pg_constraint 
            WHERE conrelid = 'gift_code_usages'::regclass
        `);

        console.log('üÜï Constraints finais:', newConstraints);

        // Teste b√°sico
        console.log('üß™ Testando nova estrutura...');
        try {
            // Tentar inserir dois registros com mesmo giftCodeId mas userIds diferentes
            await sequelize.query(`
                INSERT INTO gift_code_usages ("giftCodeId", "userId", "usedAt", "createdAt", "updatedAt") 
                VALUES (999, 9998, NOW(), NOW(), NOW()), (999, 9997, NOW(), NOW(), NOW())
                ON CONFLICT DO NOTHING
            `);

            // Limpar dados de teste
            await sequelize.query(`DELETE FROM gift_code_usages WHERE "userId" IN (9998, 9997)`);

            console.log('‚úÖ TESTE PASSOU: M√∫ltiplos usu√°rios podem usar o mesmo c√≥digo!');
        } catch (error) {
            console.log('‚ö†Ô∏è Teste falhou, mas pode ser por dados j√° existentes:', error.message);
        }

        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('üéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!');
        console.log('‚úÖ Sistema de c√≥digos de presente funcionando corretamente');

    } catch (error) {
        console.error('‚ùå ERRO DURANTE MIGRA√á√ÉO:', error);
        throw error;
    } finally {
        if (sequelize) {
            await sequelize.close();
        }
    }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
    fixGiftCodeConstraintProduction()
        .then(() => {
            console.log('‚úÖ Migra√ß√£o finalizada');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Migra√ß√£o falhou:', error);
            process.exit(1);
        });
}

module.exports = fixGiftCodeConstraintProduction; 