const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '.env') });

const sequelize = require('./db');
const GiftCode = require('./models/giftCode');

async function testValidation() {
    try {
        console.log('üîç Testando valida√ß√£o de c√≥digos...');

        // Conectar ao banco
        await sequelize.authenticate();
        await sequelize.sync();

        // Buscar o c√≥digo TESTE123
        const code = 'TESTE123';
        const giftCode = await GiftCode.findOne({ where: { code } });

        if (!giftCode) {
            console.log('‚ùå C√≥digo n√£o encontrado:', code);
            return;
        }

        console.log('üìã C√≥digo encontrado:');
        console.log('  - C√≥digo:', giftCode.code);
        console.log('  - Ativo:', giftCode.isActive);
        console.log('  - Usado:', giftCode.usedCount);
        console.log('  - M√°ximo:', giftCode.maxUses);
        console.log('  - Expira em:', giftCode.expiresAt);

        // Verifica√ß√µes
        console.log('\nüîç Verifica√ß√µes:');
        console.log('  - C√≥digo existe:', giftCode ? '‚úÖ' : '‚ùå');
        console.log('  - Est√° ativo:', giftCode.isActive ? '‚úÖ' : '‚ùå');
        console.log('  - N√£o esgotado:', (giftCode.usedCount < giftCode.maxUses) ? '‚úÖ' : '‚ùå');
        console.log('  - N√£o expirado:', (!giftCode.expiresAt || new Date() <= giftCode.expiresAt) ? '‚úÖ' : '‚ùå');

        // Simular valida√ß√£o
        const isValid = giftCode &&
            giftCode.isActive &&
            giftCode.usedCount < giftCode.maxUses &&
            (!giftCode.expiresAt || new Date() <= giftCode.expiresAt);

        console.log('\nüéØ Resultado:', isValid ? '‚úÖ V√ÅLIDO' : '‚ùå INV√ÅLIDO');

        process.exit(0);

    } catch (error) {
        console.error('‚ùå Erro:', error);
        process.exit(1);
    }
}

testValidation(); 