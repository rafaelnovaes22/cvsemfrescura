const fs = require('fs');
const path = require('path');

console.log('üîß CORRE√á√ÉO DE PROBLEMAS DE C√ìDIGOS DE PRESENTE NO FRONTEND');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

// 1. Verificar se h√° problemas de sintaxe no arquivo analisar.html
const analisarPath = path.join(__dirname, '../frontend/analisar.html');

if (!fs.existsSync(analisarPath)) {
    console.error('‚ùå Arquivo analisar.html n√£o encontrado!');
    process.exit(1);
}

const content = fs.readFileSync(analisarPath, 'utf8');

console.log('\n1Ô∏è‚É£ VERIFICANDO PROBLEMAS CONHECIDOS...');

// Problema 1: Verificar se h√° .then() sem fechamento adequado
const problemPatterns = [
    {
        name: 'Promise .then() sem fechamento',
        pattern: /\.then\([^}]*}\s*\)\s*\.catch/g,
        description: 'Verifica se h√° promises com fechamento inadequado'
    },
    {
        name: 'Fun√ß√£o applyGiftCodeAfterAuth',
        pattern: /function applyGiftCodeAfterAuth\(code\)/g,
        description: 'Verifica se a fun√ß√£o existe'
    },
    {
        name: 'Endpoint /api/gift-code/apply',
        pattern: /\/api\/gift-code\/apply/g,
        description: 'Verifica se o endpoint est√° sendo chamado'
    },
    {
        name: 'authSuccess() sendo chamada',
        pattern: /window\.authSuccess\(\)/g,
        description: 'Verifica se authSuccess est√° sendo chamada ap√≥s login'
    },
    {
        name: 'Error handling em promises',
        pattern: /\.catch\(error\s*=>/g,
        description: 'Verifica se h√° tratamento de erro adequado'
    }
];

let foundIssues = false;

problemPatterns.forEach(({ name, pattern, description }) => {
    const matches = content.match(pattern);
    const count = matches ? matches.length : 0;

    console.log(`\nüìã ${name}:`);
    console.log(`   ${description}`);
    console.log(`   Ocorr√™ncias encontradas: ${count}`);

    if (count === 0 && (name.includes('applyGiftCodeAfterAuth') || name.includes('authSuccess'))) {
        console.log(`   ‚ö†Ô∏è PROBLEMA: ${name} n√£o encontrada!`);
        foundIssues = true;
    }
});

// Problema 2: Verificar se h√° JavaScript com syntax errors comuns
console.log('\n2Ô∏è‚É£ VERIFICANDO SYNTAX ERRORS COMUNS...');

const syntaxChecks = [
    {
        name: 'Par√™nteses desbalanceados',
        test: () => {
            const opens = (content.match(/\(/g) || []).length;
            const closes = (content.match(/\)/g) || []).length;
            return opens === closes;
        }
    },
    {
        name: 'Chaves desbalanceadas',
        test: () => {
            const opens = (content.match(/\{/g) || []).length;
            const closes = (content.match(/\}/g) || []).length;
            return opens === closes;
        }
    },
    {
        name: 'Aspas n√£o fechadas (single quotes)',
        test: () => {
            const matches = content.match(/'/g) || [];
            return matches.length % 2 === 0;
        }
    }
];

syntaxChecks.forEach(({ name, test }) => {
    const isValid = test();
    console.log(`üìù ${name}: ${isValid ? '‚úÖ OK' : '‚ùå PROBLEMA'}`);
    if (!isValid) foundIssues = true;
});

// Problema 3: Verificar se h√° logs espec√≠ficos de produ√ß√£o
console.log('\n3Ô∏è‚É£ VERIFICANDO LOGS DE PRODU√á√ÉO...');

const productionChecks = [
    'console.log.*gift',
    'console.error.*gift',
    'auth\\.loginUser',
    'applyGiftCodeAfterAuth'
];

productionChecks.forEach(pattern => {
    const regex = new RegExp(pattern, 'gi');
    const matches = content.match(regex);
    const count = matches ? matches.length : 0;
    console.log(`üîç ${pattern}: ${count} ocorr√™ncias`);
});

// 4. Criar backup e sugerir corre√ß√µes
console.log('\n4Ô∏è‚É£ CRIANDO BACKUP E SUGERINDO CORRE√á√ïES...');

const backupPath = analisarPath + '.backup.' + Date.now();
fs.copyFileSync(analisarPath, backupPath);
console.log(`üíæ Backup criado: ${backupPath}`);

console.log('\nüí° DIAGN√ìSTICO ESPEC√çFICO PARA PRODU√á√ÉO:');
console.log('');
console.log('üö® PROBLEMAS MAIS COMUNS EM PRODU√á√ÉO:');
console.log('');
console.log('1. üîó URLs da API:');
console.log('   - Verificar se as URLs s√£o relativas (/api/gift-code/apply)');
console.log('   - N√£o usar localhost em produ√ß√£o');
console.log('');
console.log('2. üîê Headers de autentica√ß√£o:');
console.log('   - Bearer token deve estar correto');
console.log('   - Verificar se auth.getToken() retorna valor v√°lido');
console.log('');
console.log('3. ‚è±Ô∏è Timing issues:');
console.log('   - authSuccess() deve ser chamada AP√ìS aplica√ß√£o do c√≥digo');
console.log('   - Verificar se promises est√£o sendo awaited corretamente');
console.log('');
console.log('4. üèÅ CORS e Network:');
console.log('   - Verificar se servidor aceita requisi√ß√µes do dom√≠nio');
console.log('   - Headers CORS configurados corretamente');

if (foundIssues) {
    console.log('\n‚ùå PROBLEMAS IDENTIFICADOS! Revise o c√≥digo acima.');
} else {
    console.log('\n‚úÖ Nenhum problema √≥bvio identificado no frontend.');
    console.log('   O problema pode estar no backend ou na configura√ß√£o.');
}

console.log('\nüîß PR√ìXIMOS PASSOS RECOMENDADOS:');
console.log('1. Execute: node backend/debug-gift-code-production.js');
console.log('2. Verifique logs do browser (F12 -> Console)');
console.log('3. Teste manualmente: curl -X POST https://seudominio.com/api/gift-code/validate');
console.log('4. Verifique se o servidor est√° retornando 200 para as APIs');

process.exit(foundIssues ? 1 : 0); 