#!/usr/bin/env node

// üîí Script de Migra√ß√£o para Criptografia Segura
const readline = require('readline');
const fs = require('fs');
const path = require('path');

// Carregar vers√µes antigas e novas
const oldEncryption = require('./utils/encryption');
const newEncryption = require('./utils/encryption-secure');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function askQuestion(question) {
    return new Promise((resolve) => {
        rl.question(question, (answer) => {
            resolve(answer.trim());
        });
    });
}

async function main() {
    console.log('üîí === MIGRA√á√ÉO PARA CRIPTOGRAFIA SEGURA ===');
    console.log('üìã Este script vai migrar suas chaves para o novo sistema seguro\n');

    console.log('‚ö†Ô∏è AVISO: Este processo vai:');
    console.log('1. Descriptografar chaves com o sistema antigo');
    console.log('2. Re-criptografar com o sistema seguro (AES-256-GCM)');
    console.log('3. Atualizar o c√≥digo para usar o novo m√≥dulo\n');

    const confirm = await askQuestion('Deseja continuar? (s/n): ');
    if (confirm.toLowerCase() !== 's') {
        console.log('‚ùå Migra√ß√£o cancelada');
        rl.close();
        return;
    }

    // Passo 1: Verificar ENCRYPTION_KEY
    console.log('\nüîë === PASSO 1: VERIFICA√á√ÉO DA CHAVE ===');

    if (!process.env.ENCRYPTION_KEY) {
        console.log('‚ùå ENCRYPTION_KEY n√£o encontrada');
        console.log('Configure a vari√°vel de ambiente e tente novamente');
        rl.close();
        return;
    }

    console.log('‚úÖ ENCRYPTION_KEY encontrada');
    console.log('üîç Verificando novo m√≥dulo...');

    if (!newEncryption.isConfigured()) {
        console.log('‚ùå Novo m√≥dulo n√£o est√° configurado corretamente');
        rl.close();
        return;
    }

    console.log('‚úÖ Novo m√≥dulo configurado corretamente');

    // Passo 2: Teste de compatibilidade
    console.log('\nüß™ === PASSO 2: TESTE DE COMPATIBILIDADE ===');

    const testString = 'sk_test_1234567890';
    console.log('üîç Testando criptografia...');

    try {
        const encrypted = newEncryption.encrypt(testString);
        const decrypted = newEncryption.decrypt(encrypted);

        if (decrypted === testString) {
            console.log('‚úÖ Novo sistema funcionando corretamente');
        } else {
            console.log('‚ùå Erro no novo sistema de criptografia');
            rl.close();
            return;
        }
    } catch (error) {
        console.log('‚ùå Erro ao testar novo sistema:', error.message);
        rl.close();
        return;
    }

    // Passo 3: Backup do m√≥dulo antigo
    console.log('\nüíæ === PASSO 3: BACKUP ===');

    const backupPath = path.join(__dirname, 'utils', 'encryption.old.js');
    const currentPath = path.join(__dirname, 'utils', 'encryption.js');
    const securePath = path.join(__dirname, 'utils', 'encryption-secure.js');

    try {
        fs.copyFileSync(currentPath, backupPath);
        console.log('‚úÖ Backup criado em:', backupPath);
    } catch (error) {
        console.log('‚ùå Erro ao criar backup:', error.message);
        rl.close();
        return;
    }

    // Passo 4: Substituir m√≥dulo
    console.log('\nüîÑ === PASSO 4: ATUALIZA√á√ÉO DO M√ìDULO ===');

    try {
        // Copiar vers√£o segura sobre a atual
        fs.copyFileSync(securePath, currentPath);
        console.log('‚úÖ M√≥dulo atualizado com sucesso');
    } catch (error) {
        console.log('‚ùå Erro ao atualizar m√≥dulo:', error.message);
        console.log('üîÑ Restaurando backup...');
        fs.copyFileSync(backupPath, currentPath);
        rl.close();
        return;
    }

    // Passo 5: Re-criptografar chaves
    console.log('\nüîê === PASSO 5: RE-CRIPTOGRAFIA DE CHAVES ===');
    console.log('‚ö†Ô∏è IMPORTANTE: Voc√™ precisar√° atualizar as chaves no Railway\n');

    const recryptKeys = await askQuestion('Deseja re-criptografar suas chaves agora? (s/n): ');

    if (recryptKeys.toLowerCase() === 's') {
        console.log('\nüìã Digite suas chaves para re-criptografar:\n');

        const stripeSecretKey = await askQuestion('STRIPE_SECRET_KEY (sk_live_...): ');
        const stripePublishableKey = await askQuestion('STRIPE_PUBLISHABLE_KEY (pk_live_...): ');
        const stripeWebhookSecret = await askQuestion('STRIPE_WEBHOOK_SECRET (opcional): ');

        console.log('\nüîê Re-criptografando com novo sistema...');

        const encryptedSecret = newEncryption.encrypt(stripeSecretKey);
        const encryptedPublishable = newEncryption.encrypt(stripePublishableKey);
        const encryptedWebhook = stripeWebhookSecret ? newEncryption.encrypt(stripeWebhookSecret) : null;

        console.log('\n‚úÖ === NOVAS CHAVES CRIPTOGRAFADAS ===');
        console.log('Configure estas no Railway:\n');

        console.log('STRIPE_SECRET_KEY=');
        console.log(encryptedSecret);
        console.log('\nSTRIPE_PUBLISHABLE_KEY=');
        console.log(encryptedPublishable);
        if (encryptedWebhook) {
            console.log('\nSTRIPE_WEBHOOK_SECRET=');
            console.log(encryptedWebhook);
        }
    }

    // Passo 6: Instru√ß√µes finais
    console.log('\n‚úÖ === MIGRA√á√ÉO CONCLU√çDA ===');
    console.log('üìã Pr√≥ximos passos:');
    console.log('1. Atualize as chaves criptografadas no Railway');
    console.log('2. Fa√ßa deploy da aplica√ß√£o');
    console.log('3. Teste um pagamento');
    console.log('4. Se tudo funcionar, delete encryption-secure.js e encryption.old.js');

    console.log('\nüõ°Ô∏è Melhorias de seguran√ßa aplicadas:');
    console.log('‚úÖ AES-256-GCM com autentica√ß√£o');
    console.log('‚úÖ Sem fallback inseguro');
    console.log('‚úÖ Valida√ß√£o rigorosa de chaves');
    console.log('‚úÖ Logs seguros em produ√ß√£o');

    console.log('\n‚ö†Ô∏è Se algo der errado:');
    console.log('1. Restaure: cp utils/encryption.old.js utils/encryption.js');
    console.log('2. Use as chaves antigas no Railway');

    rl.close();
}

main().catch(console.error); 