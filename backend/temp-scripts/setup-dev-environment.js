// üîß Script de Configura√ß√£o do Ambiente de Desenvolvimento
const fs = require('fs');
const path = require('path');

console.log('üöÄ CONFIGURA√á√ÉO DO AMBIENTE DE DESENVOLVIMENTO\n');

const envPath = path.join(__dirname, '.env');
const examplePath = path.join(__dirname, 'env.local.example');

// Verificar se j√° existe arquivo .env
if (fs.existsSync(envPath)) {
    console.log('‚úÖ Arquivo .env j√° existe');

    // Verificar se cont√©m as chaves do Stripe
    const envContent = fs.readFileSync(envPath, 'utf8');

    const hasStripeSecret = envContent.includes('STRIPE_SECRET_KEY=sk_');
    const hasStripePublishable = envContent.includes('STRIPE_PUBLISHABLE_KEY=pk_');

    if (hasStripeSecret && hasStripePublishable) {
        console.log('‚úÖ Chaves do Stripe encontradas no .env');
        console.log('üéØ Ambiente j√° configurado!\n');

        console.log('üìã PR√ìXIMOS PASSOS:');
        console.log('1. Reinicie o servidor: npm start');
        console.log('2. Teste: http://localhost:8080/payment.html');
        console.log('3. Use cart√£o teste: 4242 4242 4242 4242');
    } else {
        console.log('‚ö†Ô∏è Chaves do Stripe n√£o encontradas no .env');
        console.log('üí° Configure STRIPE_SECRET_KEY e STRIPE_PUBLISHABLE_KEY');
        console.log('üîó Obtenha em: https://dashboard.stripe.com/test/apikeys');
    }
} else {
    console.log('‚ùå Arquivo .env n√£o encontrado');

    if (fs.existsSync(examplePath)) {
        console.log('üìù Criando .env a partir do exemplo...');

        try {
            fs.copyFileSync(examplePath, envPath);
            console.log('‚úÖ Arquivo .env criado com sucesso!');
            console.log('');
            console.log('üîß CONFIGURA√á√ÉO NECESS√ÅRIA:');
            console.log('1. Abra o arquivo .env');
            console.log('2. Configure STRIPE_SECRET_KEY (sk_test_...)');
            console.log('3. Configure STRIPE_PUBLISHABLE_KEY (pk_test_...)');
            console.log('4. Configure OPENAI_API_KEY (sk-...)');
            console.log('');
            console.log('üîó Obtenha chaves Stripe: https://dashboard.stripe.com/test/apikeys');
            console.log('üîó Obtenha chave OpenAI: https://platform.openai.com/api-keys');
        } catch (error) {
            console.error('‚ùå Erro ao criar .env:', error.message);
        }
    } else {
        console.log('‚ùå Arquivo de exemplo n√£o encontrado');
    }
}

// Testar configura√ß√£o atual
console.log('\n' + '='.repeat(60));
console.log('üß™ TESTANDO CONFIGURA√á√ÉO ATUAL');
console.log('='.repeat(60));

try {
    require('dotenv').config();

    const checks = [
        {
            name: 'STRIPE_SECRET_KEY',
            value: process.env.STRIPE_SECRET_KEY,
            required: true,
            test: (val) => val && val.startsWith('sk_')
        },
        {
            name: 'STRIPE_PUBLISHABLE_KEY',
            value: process.env.STRIPE_PUBLISHABLE_KEY,
            required: true,
            test: (val) => val && val.startsWith('pk_')
        },
        {
            name: 'STRIPE_WEBHOOK_SECRET',
            value: process.env.STRIPE_WEBHOOK_SECRET,
            required: false,
            test: (val) => !val || val.startsWith('whsec_')
        },
        {
            name: 'OPENAI_API_KEY',
            value: process.env.OPENAI_API_KEY,
            required: true,
            test: (val) => val && val.startsWith('sk-')
        },
        {
            name: 'JWT_SECRET',
            value: process.env.JWT_SECRET,
            required: true,
            test: (val) => val && val.length >= 32
        }
    ];

    let allGood = true;

    checks.forEach(check => {
        const configured = !!check.value;
        const valid = check.test(check.value);
        const status = configured && valid ? '‚úÖ' : (check.required ? '‚ùå' : '‚ö†Ô∏è');

        console.log(`${status} ${check.name}: ${configured ? 'Configurada' : 'N√£o configurada'}`);

        if (configured && !valid) {
            console.log(`   ‚ö†Ô∏è Formato inv√°lido`);
            allGood = false;
        }

        if (!configured && check.required) {
            allGood = false;
        }
    });

    console.log('\n' + '='.repeat(60));

    if (allGood) {
        console.log('üéâ CONFIGURA√á√ÉO COMPLETA!');
        console.log('');
        console.log('üìã COMANDOS PARA TESTAR:');
        console.log('1. npm start');
        console.log('2. Abrir: http://localhost:8080/payment.html');
        console.log('3. Usar cart√£o: 4242 4242 4242 4242');
    } else {
        console.log('‚ö†Ô∏è CONFIGURA√á√ÉO INCOMPLETA');
        console.log('');
        console.log('üìã O QUE FAZER:');
        console.log('1. Edite o arquivo .env');
        console.log('2. Configure as vari√°veis marcadas com ‚ùå');
        console.log('3. Execute novamente: node setup-dev-environment.js');
    }

} catch (error) {
    console.error('‚ùå Erro ao testar configura√ß√£o:', error.message);
}

console.log('\nüèÅ Configura√ß√£o conclu√≠da!'); 