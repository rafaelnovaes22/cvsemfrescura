const sequelize = require('./db');

async function checkDatabaseStructure() {
    try {
        console.log('üîç Verificando estrutura do banco de dados...\n');

        // Verificar conex√£o
        await sequelize.authenticate();
        console.log('‚úÖ Conex√£o com banco estabelecida!\n');

        // Listar todas as tabelas
        console.log('üìã Tabelas no banco:');
        const [tables] = await sequelize.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);

        tables.forEach(table => {
            console.log(`  - ${table.table_name}`);
        });

        // Verificar tabelas de usu√°rios especificamente
        console.log('\nüë• Tabelas relacionadas a usu√°rios:');
        const [userTables] = await sequelize.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND (table_name ILIKE '%user%') 
      ORDER BY table_name
    `);

        userTables.forEach(table => {
            console.log(`  - ${table.table_name}`);
        });

        // Verificar constraints da tabela transactions
        console.log('\nüîó Constraints de chave estrangeira da tabela transactions:');
        const [constraints] = await sequelize.query(`
      SELECT 
        tc.constraint_name,
        tc.table_name,
        kcu.column_name,
        ccu.table_name AS foreign_table_name,
        ccu.column_name AS foreign_column_name
      FROM 
        information_schema.table_constraints AS tc 
        JOIN information_schema.key_column_usage AS kcu
          ON tc.constraint_name = kcu.constraint_name
        JOIN information_schema.constraint_column_usage AS ccu
          ON ccu.constraint_name = tc.constraint_name
      WHERE 
        tc.constraint_type = 'FOREIGN KEY' 
        AND tc.table_name = 'transactions'
    `);

        if (constraints.length === 0) {
            console.log('  ‚ö†Ô∏è Nenhuma constraint de chave estrangeira encontrada!');
        } else {
            constraints.forEach(constraint => {
                console.log(`  - ${constraint.constraint_name}: ${constraint.table_name}.${constraint.column_name} -> ${constraint.foreign_table_name}.${constraint.foreign_column_name}`);
            });
        }

        // Verificar estrutura da tabela transactions
        console.log('\nüèóÔ∏è Estrutura da tabela transactions:');
        const [transactionColumns] = await sequelize.query(`
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'transactions' 
      ORDER BY ordinal_position
    `);

        if (transactionColumns.length === 0) {
            console.log('  ‚ö†Ô∏è Tabela transactions n√£o encontrada!');
        } else {
            transactionColumns.forEach(column => {
                console.log(`  - ${column.column_name}: ${column.data_type} (${column.is_nullable === 'YES' ? 'nullable' : 'not null'})`);
            });
        }

        // Verificar estrutura das tabelas de usu√°rios
        console.log('\nüë§ Estrutura das tabelas de usu√°rios:');
        const [userColumns] = await sequelize.query(`
      SELECT table_name, column_name, data_type, is_nullable
      FROM information_schema.columns 
      WHERE table_name ILIKE '%user%'
      ORDER BY table_name, ordinal_position
    `);

        if (userColumns.length === 0) {
            console.log('  ‚ö†Ô∏è Nenhuma tabela de usu√°rios encontrada!');
        } else {
            let currentTable = '';
            userColumns.forEach(column => {
                if (column.table_name !== currentTable) {
                    currentTable = column.table_name;
                    console.log(`\n  üìã ${currentTable}:`);
                }
                console.log(`    - ${column.column_name}: ${column.data_type} (${column.is_nullable === 'YES' ? 'nullable' : 'not null'})`);
            });
        }

        console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!');

    } catch (error) {
        console.error('‚ùå Erro ao verificar estrutura do banco:', error.message);
    } finally {
        await sequelize.close();
    }
}

checkDatabaseStructure(); 