// Script simples para consultar c√≥digos de presente
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// Caminho para o banco de dados
const dbPath = path.join(__dirname, 'database', 'dev.sqlite');

console.log('üîç CONSULTANDO C√ìDIGOS DE PRESENTE...');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log(`üìÅ Banco de dados: ${dbPath}`);
console.log('');

// Abrir conex√£o com o banco
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('‚ùå Erro ao conectar com o banco:', err.message);
        console.log('');
        console.log('üí° Poss√≠veis solu√ß√µes:');
        console.log('1. Execute: cd backend && npm start (para criar o banco)');
        console.log('2. Verifique se o servidor foi iniciado pelo menos uma vez');
        console.log('3. Execute: node inicializar-codigos-prod.js');
        return;
    }

    console.log('‚úÖ Conectado ao banco SQLite');

    // Consultar c√≥digos de presente
    const query = `
        SELECT 
            code,
            maxUses,
            usedCount,
            isActive,
            description,
            expiresAt,
            createdAt
        FROM gift_codes 
        ORDER BY createdAt DESC
    `;

    db.all(query, [], (err, rows) => {
        if (err) {
            console.error('‚ùå Erro na consulta:', err.message);
            console.log('');
            console.log('üí° A tabela gift_codes pode n√£o existir ainda.');
            console.log('Execute: node inicializar-codigos-prod.js para criar a estrutura');
        } else {
            console.log(`üìä Total de c√≥digos encontrados: ${rows.length}`);
            console.log('');

            if (rows.length === 0) {
                console.log('‚ùå NENHUM C√ìDIGO DE PRESENTE ENCONTRADO!');
                console.log('');
                console.log('üí° Para criar c√≥digos:');
                console.log('1. Execute: node inicializar-codigos-prod.js');
                console.log('2. Ou acesse: http://localhost:3000/admin.html');
                console.log('3. Ou execute: node create-test-gift-code.js');
            } else {
                console.log('üéÅ C√ìDIGOS DE PRESENTE DISPON√çVEIS:');
                console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

                let ativos = 0;
                let disponiveis = 0;
                let esgotados = 0;
                let expirados = 0;

                rows.forEach((row, index) => {
                    const usosRestantes = row.maxUses - row.usedCount;
                    const isExpired = row.expiresAt && new Date(row.expiresAt) < new Date();
                    const isExhausted = row.usedCount >= row.maxUses;

                    // Contadores
                    if (row.isActive) ativos++;
                    if (row.isActive && !isExpired && !isExhausted) disponiveis++;
                    if (isExhausted) esgotados++;
                    if (isExpired) expirados++;

                    // Status
                    let status = '‚úÖ DISPON√çVEL';
                    let statusIcon = 'üü¢';

                    if (isExpired) {
                        status = '‚è∞ EXPIRADO';
                        statusIcon = '‚è∞';
                    } else if (isExhausted) {
                        status = '‚ùå ESGOTADO';
                        statusIcon = 'üî¥';
                    } else if (!row.isActive) {
                        status = 'üî¥ INATIVO';
                        statusIcon = 'üî¥';
                    }

                    const expiracao = row.expiresAt ?
                        new Date(row.expiresAt).toLocaleDateString('pt-BR') :
                        'Sem expira√ß√£o';

                    const criacao = new Date(row.createdAt).toLocaleDateString('pt-BR');

                    console.log(`${index + 1}. ${statusIcon} ${row.code}`);
                    console.log(`   üìä Status: ${status}`);
                    console.log(`   üî¢ Usos: ${row.usedCount}/${row.maxUses} (restam ${usosRestantes})`);
                    console.log(`   üìÖ Expira: ${expiracao}`);
                    console.log(`   üìù Descri√ß√£o: ${row.description || 'Sem descri√ß√£o'}`);
                    console.log(`   üìç Criado: ${criacao}`);
                    console.log('');
                });

                // Estat√≠sticas
                console.log('üìà ESTAT√çSTICAS:');
                console.log(`   üü¢ Total: ${rows.length}`);
                console.log(`   ‚úÖ Ativos: ${ativos}`);
                console.log(`   üéØ Dispon√≠veis: ${disponiveis}`);
                console.log(`   üî¥ Esgotados: ${esgotados}`);
                console.log(`   ‚è∞ Expirados: ${expirados}`);
                console.log('');

                // C√≥digos prontos para uso
                const codigosDisponiveis = rows.filter(row =>
                    row.isActive &&
                    row.usedCount < row.maxUses &&
                    (!row.expiresAt || new Date(row.expiresAt) > new Date())
                );

                if (codigosDisponiveis.length > 0) {
                    console.log('üöÄ C√ìDIGOS PRONTOS PARA USO:');
                    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
                    codigosDisponiveis.forEach(row => {
                        const usosRestantes = row.maxUses - row.usedCount;
                        console.log(`‚úÖ ${row.code} - ${usosRestantes} uso(s) restante(s)`);
                        console.log(`   üîó http://localhost:3000/analisar.html?giftCode=${row.code}`);
                    });
                    console.log('');
                }
            }

            console.log('üîß FERRAMENTAS:');
            console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
            console.log('üåê Painel Admin: http://localhost:3000/admin.html');
            console.log('üìä Health Check: http://localhost:3000/health');
            console.log('üéØ Criar c√≥digos: node create-test-gift-code.js');
        }

        // Fechar conex√£o
        db.close((err) => {
            if (err) {
                console.error('‚ùå Erro ao fechar banco:', err.message);
            } else {
                console.log('');
                console.log('‚úÖ Consulta conclu√≠da!');
            }
        });
    });
}); 