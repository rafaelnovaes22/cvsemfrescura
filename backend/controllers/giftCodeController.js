const GiftCode = require('../models/giftCode');
const User = require('../models/user');
const GiftCodeUsage = require('../models/giftCodeUsage');

// Verificar e aplicar um c√≥digo de presente
exports.validateCode = async (req, res) => {
  try {
    const { code } = req.body;

    console.log('üîç Validando c√≥digo:', code);

    if (!code) {
      return res.status(400).json({ error: 'C√≥digo de presente √© obrigat√≥rio.' });
    }

    const giftCode = await GiftCode.findOne({ where: { code } });

    if (!giftCode) {
      console.log('‚ùå C√≥digo n√£o encontrado:', code);
      return res.status(400).json({
        valid: false,
        error: 'C√≥digo de presente inv√°lido.'
      });
    }

    // Verificar se o c√≥digo est√° ativo
    if (!giftCode.isActive) {
      console.log('‚ùå C√≥digo inativo:', code);
      return res.status(400).json({
        valid: false,
        error: 'C√≥digo de presente inativo.'
      });
    }

    // Verificar se ainda h√° usos dispon√≠veis
    if (giftCode.usedCount >= giftCode.maxUses) {
      console.log('‚ùå C√≥digo esgotado:', code, 'usado', giftCode.usedCount, 'de', giftCode.maxUses);
      return res.status(400).json({
        valid: false,
        error: 'C√≥digo de presente esgotado.'
      });
    }

    // Verificar se o c√≥digo expirou
    if (giftCode.expiresAt && new Date() > giftCode.expiresAt) {
      console.log('‚ùå C√≥digo expirado:', code);
      return res.status(400).json({
        valid: false,
        error: 'C√≥digo de presente expirado.'
      });
    }

    console.log('‚úÖ C√≥digo v√°lido:', code);
    res.json({
      valid: true,
      credits: 1, // Cada c√≥digo d√° 1 cr√©dito
      remainingUses: giftCode.maxUses - giftCode.usedCount
    });
  } catch (error) {
    console.error('‚ùå Erro ao validar c√≥digo de presente:', error);
    res.status(500).json({ error: 'Erro interno do servidor.' });
  }
};

// Aplicar um c√≥digo de presente ao usu√°rio (incrementar cr√©dito)
exports.applyCode = async (req, res) => {
  try {
    const { code } = req.body;
    const userId = req.user?.id;

    console.log('üéÅ Aplicando c√≥digo:', code, 'para usu√°rio:', userId);

    if (!userId) {
      return res.status(401).json({ error: 'Usu√°rio n√£o autenticado.' });
    }

    if (!code) {
      return res.status(400).json({ error: 'C√≥digo de presente √© obrigat√≥rio.' });
    }

    // Verificar se o c√≥digo existe e √© v√°lido
    const giftCode = await GiftCode.findOne({ where: { code } });

    if (!giftCode) {
      return res.status(400).json({
        success: false,
        error: 'C√≥digo de presente n√£o encontrado.'
      });
    }

    // Verificar se o c√≥digo est√° ativo
    if (!giftCode.isActive) {
      return res.status(400).json({
        success: false,
        error: 'C√≥digo de presente inativo.'
      });
    }

    // Verificar se ainda h√° usos dispon√≠veis
    if (giftCode.usedCount >= giftCode.maxUses) {
      return res.status(400).json({
        success: false,
        error: 'C√≥digo de presente esgotado.'
      });
    }

    // Verificar se o c√≥digo expirou
    if (giftCode.expiresAt && new Date() > giftCode.expiresAt) {
      return res.status(400).json({
        success: false,
        error: 'C√≥digo de presente expirado.'
      });
    }

    // Verificar se o usu√°rio j√° usou este c√≥digo antes
    const existingUsage = await GiftCodeUsage.findOne({
      where: {
        giftCodeId: giftCode.id,
        userId: userId
      }
    });

    if (existingUsage) {
      return res.status(400).json({
        success: false,
        error: 'Voc√™ j√° utilizou este c√≥digo de presente anteriormente.'
      });
    }

    // Buscar o usu√°rio
    const user = await User.findByPk(userId);
    if (!user) {
      return res.status(404).json({ error: 'Usu√°rio n√£o encontrado.' });
    }

    // Registrar o uso do c√≥digo por este usu√°rio
    await GiftCodeUsage.create({
      giftCodeId: giftCode.id,
      userId: userId
    });

    // Incrementar o contador de uso do c√≥digo
    await giftCode.update({ usedCount: giftCode.usedCount + 1 });

    // Adicionar um cr√©dito ao usu√°rio
    const newCredits = (user.credits || 0) + 1;
    await user.update({ credits: newCredits });

    console.log('‚úÖ C√≥digo aplicado com sucesso! Usu√°rio agora tem', newCredits, 'cr√©ditos');

    return res.status(200).json({
      success: true,
      message: 'C√≥digo aplicado com sucesso! Voc√™ recebeu 1 cr√©dito.',
      credits: newCredits,
      creditsAdded: 1,
      totalCredits: newCredits
    });
  } catch (error) {
    console.error('‚ùå Erro ao aplicar c√≥digo de presente:', error);
    return res.status(500).json({
      success: false,
      error: 'Erro interno do servidor.'
    });
  }
};

// Criar um novo c√≥digo de presente (apenas para administradores)
exports.createCode = async (req, res) => {
  try {
    const { code, maxUses, expiresAt } = req.body;
    const userId = req.user?.id;

    if (!code) {
      return res.status(400).json({ error: 'C√≥digo de presente obrigat√≥rio.' });
    }

    // Verificar se o c√≥digo j√° existe
    const existingCode = await GiftCode.findOne({ where: { code } });
    if (existingCode) {
      return res.status(400).json({ error: 'Este c√≥digo j√° existe.' });
    }

    // Criar o novo c√≥digo
    const giftCode = await GiftCode.create({
      code,
      maxUses: maxUses || 1,
      expiresAt: expiresAt || null,
      isActive: true,
      usedCount: 0,
      createdById: userId
    });

    return res.status(201).json({
      success: true,
      message: 'C√≥digo de presente criado com sucesso!',
      giftCode
    });
  } catch (error) {
    console.error('‚ùå Erro ao criar c√≥digo de presente:', error);
    return res.status(500).json({ error: 'Erro ao criar c√≥digo de presente.' });
  }
};
