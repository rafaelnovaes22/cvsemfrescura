const sequelize = require('./db');
const { User, GiftCode, GiftCodeUsage } = require('./models');

async function testGiftCodeSystem() {
    try {
        console.log('üß™ Testando sistema de Gift Codes...\n');

        // Conectar ao banco
        await sequelize.authenticate();
        console.log('‚úÖ Conectado ao banco de dados\n');

        // Sincronizar modelos
        await sequelize.sync();

        // 1. VERIFICAR SE EXISTEM C√ìDIGOS ATIVOS
        console.log('üìã 1. Verificando c√≥digos ativos no banco...');
        const activeCodes = await GiftCode.findAll({
            where: { isActive: true },
            order: [['createdAt', 'DESC']]
        });

        if (activeCodes.length === 0) {
            console.log('‚ùå PROBLEMA: Nenhum c√≥digo de presente ativo encontrado!');
            console.log('   Solu√ß√£o: Execute node create-production-codes.js\n');
        } else {
            console.log(`‚úÖ Encontrados ${activeCodes.length} c√≥digos ativos:`);
            activeCodes.forEach(code => {
                console.log(`   - ${code.code} (usado ${code.usedCount}/${code.maxUses})`);
            });
            console.log('');
        }

        // 2. VERIFICAR ESTRUTURA DA TABELA USERS
        console.log('üë§ 2. Verificando estrutura da tabela users...');
        try {
            const [results] = await sequelize.query(`
                SELECT column_name, data_type, column_default 
                FROM information_schema.columns 
                WHERE table_name = 'users' AND column_name = 'credits'
            `);

            if (results.length === 0) {
                console.log('‚ùå PROBLEMA: Campo "credits" n√£o existe na tabela users!');
                console.log('   Solu√ß√£o: Execute uma migra√ß√£o para adicionar o campo credits\n');
            } else {
                console.log('‚úÖ Campo "credits" existe na tabela users');
                console.log(`   Tipo: ${results[0].data_type}, Padr√£o: ${results[0].column_default}\n`);
            }
        } catch (error) {
            console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar estrutura (PostgreSQL n√£o conectado)\n');
        }

        // 3. VERIFICAR SE EXISTEM USU√ÅRIOS DE TESTE
        console.log('üë• 3. Verificando usu√°rios existentes...');
        const userCount = await User.count();
        console.log(`‚úÖ Encontrados ${userCount} usu√°rios no banco\n`);

        // 4. TESTE DE APLICA√á√ÉO DE C√ìDIGO (SIMULADO)
        console.log('üéÅ 4. Testando l√≥gica de aplica√ß√£o de c√≥digo...');

        if (activeCodes.length > 0) {
            const testCode = activeCodes[0];
            console.log(`   Testando com c√≥digo: ${testCode.code}`);

            // Verificar se c√≥digo est√° v√°lido
            const isValid = testCode.isActive &&
                testCode.usedCount < testCode.maxUses &&
                (!testCode.expiresAt || new Date() <= testCode.expiresAt);

            if (isValid) {
                console.log('‚úÖ C√≥digo est√° v√°lido para uso');
                console.log(`   Usos restantes: ${testCode.maxUses - testCode.usedCount}`);
            } else {
                console.log('‚ùå C√≥digo n√£o est√° v√°lido:');
                if (!testCode.isActive) console.log('   - C√≥digo inativo');
                if (testCode.usedCount >= testCode.maxUses) console.log('   - C√≥digo esgotado');
                if (testCode.expiresAt && new Date() > testCode.expiresAt) console.log('   - C√≥digo expirado');
            }
        }

        console.log('');

        // 5. VERIFICAR ASSOCIA√á√ïES ENTRE TABELAS
        console.log('üîó 5. Verificando associa√ß√µes entre tabelas...');
        try {
            const usageCount = await GiftCodeUsage.count();
            console.log(`‚úÖ Tabela gift_code_usages existe com ${usageCount} registros\n`);
        } catch (error) {
            console.log('‚ùå PROBLEMA: Tabela gift_code_usages n√£o existe ou tem problema');
            console.log(`   Erro: ${error.message}\n`);
        }

        // 6. TESTE DE ENDPOINTS (SUGEST√ÉO)
        console.log('üåê 6. Para testar endpoints completos:');
        console.log('   curl -X POST http://localhost:3001/api/gift-code/validate \\');
        console.log('        -H "Content-Type: application/json" \\');
        console.log(`        -d \'{"code":"${activeCodes[0]?.code || 'TESTE123'}"}\'\n`);

        // 7. PROBLEMAS COMUNS E SOLU√á√ïES
        console.log('üõ†Ô∏è 7. Checklist de problemas comuns:');
        console.log('   ‚úÖ C√≥digos existem no banco: ' + (activeCodes.length > 0 ? 'SIM' : 'N√ÉO'));
        console.log('   ‚úÖ Rotas registradas no server.js: Verificar /api/gift-code');
        console.log('   ‚úÖ Middleware de auth funcionando: Testar endpoints');
        console.log('   ‚úÖ Frontend enviando token: Verificar console do navegador');
        console.log('   ‚úÖ Campo credits na tabela users: Verificar schema');
        console.log('   ‚úÖ Transa√ß√µes do banco funcionando: Testar manualmente\n');

        console.log('‚úÖ Teste conclu√≠do! Verifique os itens marcados como ‚ùå acima.\n');

        process.exit(0);

    } catch (error) {
        console.error('‚ùå Erro durante o teste:', error);
        process.exit(1);
    }
}

testGiftCodeSystem(); 