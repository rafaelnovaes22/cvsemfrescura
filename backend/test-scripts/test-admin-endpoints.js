const sequelize = require('./db');
const GiftCode = require('./models/giftCode');
const GiftCodeUsage = require('./models/giftCodeUsage');
const User = require('./models/user');

// Configurar associa√ß√µes entre modelos
const models = {
    User,
    GiftCode,
    GiftCodeUsage
};

// Configurar as associa√ß√µes
Object.keys(models).forEach(modelName => {
    if (models[modelName].associate) {
        models[modelName].associate(models);
    }
});

async function testAdminEndpoints() {
    try {
        console.log('üîç Testando endpoints administrativos...');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

        // Conectar ao banco
        await sequelize.authenticate();
        console.log('‚úÖ Conex√£o com banco estabelecida');

        // Sincronizar modelos
        await sequelize.sync();
        console.log('‚úÖ Modelos sincronizados');

        // Testar consulta que estava com problema
        console.log('\nüîç Testando consulta com associa√ß√µes...');

        const { count, rows } = await GiftCode.findAndCountAll({
            limit: 10,
            offset: 0,
            include: [
                {
                    model: GiftCodeUsage,
                    as: 'usages',
                    required: false,
                    include: [{
                        model: User,
                        as: 'user',
                        attributes: ['id', 'email']
                    }]
                }
            ]
        });

        console.log('‚úÖ Consulta executada com sucesso!');
        console.log(`üìä Total de c√≥digos: ${count}`);
        console.log(`üìã C√≥digos retornados: ${rows.length}`);

        // Mostrar alguns dados
        if (rows.length > 0) {
            console.log('\nüìã Primeiros c√≥digos encontrados:');
            rows.slice(0, 3).forEach(code => {
                console.log(`  - ${code.code}: ${code.usedCount}/${code.maxUses} usos`);
                if (code.usages && code.usages.length > 0) {
                    console.log(`    Usos: ${code.usages.length}`);
                }
            });
        }

        // Testar estat√≠sticas do dashboard
        console.log('\nüîç Testando estat√≠sticas do dashboard...');

        const stats = await Promise.all([
            // Total de c√≥digos
            GiftCode.count(),

            // C√≥digos ativos
            GiftCode.count({ where: { isActive: true } }),

            // Total de usos hoje
            GiftCodeUsage.count({
                where: {
                    createdAt: {
                        [sequelize.Sequelize.Op.gte]: new Date(new Date().setHours(0, 0, 0, 0))
                    }
                }
            })
        ]);

        console.log('‚úÖ Estat√≠sticas calculadas com sucesso!');
        console.log(`üìä Total de c√≥digos: ${stats[0]}`);
        console.log(`‚úÖ C√≥digos ativos: ${stats[1]}`);
        console.log(`üìà Usos hoje: ${stats[2]}`);

        // Testar relat√≥rio de uso
        console.log('\nüîç Testando relat√≥rio de uso...');

        const usages = await GiftCodeUsage.findAll({
            limit: 5,
            include: [
                {
                    model: GiftCode,
                    as: 'giftCode',
                    attributes: ['code', 'description']
                },
                {
                    model: User,
                    as: 'user',
                    attributes: ['email', 'name']
                }
            ],
            order: [['createdAt', 'DESC']]
        });

        console.log('‚úÖ Relat√≥rio de uso executado com sucesso!');
        console.log(`üìä Total de usos encontrados: ${usages.length}`);

        if (usages.length > 0) {
            console.log('\nüìã √öltimos usos:');
            usages.forEach(usage => {
                const giftCode = usage.giftCode ? usage.giftCode.code : 'N/A';
                const userEmail = usage.user ? usage.user.email : 'N/A';
                console.log(`  - ${giftCode} usado por ${userEmail}`);
            });
        }

        console.log('\nüéâ Todos os testes passaram com sucesso!');
        console.log('‚úÖ As associa√ß√µes est√£o funcionando corretamente');

        process.exit(0);

    } catch (error) {
        console.error('‚ùå Erro nos testes:', error);
        console.error('Detalhes:', error.message);
        process.exit(1);
    }
}

testAdminEndpoints(); 