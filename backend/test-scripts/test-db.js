const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '.env') });

const sequelize = require('./db');
const GiftCode = require('./models/giftCode');

async function testDB() {
    try {
        console.log('üîç Testando conex√£o com banco...');
        console.log('üìç DATABASE_URL:', process.env.DATABASE_URL ? 'Configurada ‚úÖ' : 'N√£o configurada ‚ùå');

        // Testar conex√£o
        await sequelize.authenticate();
        console.log('‚úÖ Conex√£o com banco estabelecida!');

        // Sincronizar tabelas
        await sequelize.sync();
        console.log('‚úÖ Tabelas sincronizadas!');

        // Verificar c√≥digos existentes
        const codes = await GiftCode.findAll();
        console.log(`üìä C√≥digos encontrados: ${codes.length}`);

        codes.forEach(code => {
            console.log(`  - ${code.code} (${code.usedCount}/${code.maxUses} usos)`);
        });

        // Se n√£o h√° c√≥digos, criar alguns
        if (codes.length === 0) {
            console.log('üî® Criando c√≥digos de teste...');

            const testCodes = [
                { code: 'TESTE123', maxUses: 10 },
                { code: 'RHSUPER2025', maxUses: 5 },
                { code: 'GRATIS123', maxUses: 5 },
                { code: 'WELCOME', maxUses: 5 }
            ];

            for (const testCode of testCodes) {
                const newCode = await GiftCode.create({
                    code: testCode.code,
                    maxUses: testCode.maxUses,
                    expiresAt: null,
                    isActive: true,
                    usedCount: 0
                });
                console.log(`‚úÖ Criado: ${newCode.code}`);
            }
        }

        console.log('üéâ Teste conclu√≠do com sucesso!');
        process.exit(0);

    } catch (error) {
        console.error('‚ùå Erro no teste:', error.message);
        console.error('Detalhes:', error);
        process.exit(1);
    }
}

testDB(); 